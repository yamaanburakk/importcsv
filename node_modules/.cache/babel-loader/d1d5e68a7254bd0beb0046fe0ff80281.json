{"ast":null,"code":"var _jsxFileName = \"/home/burak/Desktop/Project/Netmera-ex-projects/chartdata/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DataTable from 'react-data-table-component';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length === headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] === '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] === '\"') d = d.substring(d.length - 2, 1);\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        } // remove the blank rows\n\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    } // prepare columns list from headers\n\n\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c\n    }));\n    setData(list);\n    setColumns(columns);\n  }; // handle file upload\n\n\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = evt => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, {\n        type: 'binary'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv,.xlsx,.xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      pagination: true,\n      highlightOnHover: true,\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"9IcVAfeXZVJa5ZMpC133tw16skE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/burak/Desktop/Project/Netmera-ex-projects/chartdata/src/App.js"],"names":["React","useState","DataTable","XLSX","App","columns","setColumns","data","setData","processData","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","handleFileUpload","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DataTable from 'react-data-table-component';\nimport * as XLSX from 'xlsx';\n \n\nfunction App() {\n \n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n \n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n \n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length === headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] === '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] === '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n \n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n \n    // prepare columns list from headers\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n \n    setData(list);\n    setColumns(columns);\n  }\n  // handle file upload\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  }\n \n  return (\n    <div>\n      <input\n        type=\"file\"\n        accept=\".csv,.xlsx,.xls\"\n        onChange={handleFileUpload}\n      />\n      <DataTable\n        pagination\n        highlightOnHover\n        columns={columns}\n        data={data}\n      />\n    </div>\n  );\n}\n \nexport default App;"]},"metadata":{},"sourceType":"module"}