{"ast":null,"code":"var _jsxFileName = \"/home/burak/Desktop/Project/Netmera-ex-projects/chartdata/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [parsedCsvData, setParsedCsvData] = useState([]);\n\n  const parseFile = file => {\n    Papa.parse(file, {\n      header: true,\n      complete: results => {\n        setParsedCsvData(results.data);\n      }\n    });\n  };\n\n  console.log(parsedCsvData);\n  const onDrop = useCallback(acceptedFiles => {\n    if (acceptedFiles.length) {\n      parseFile(acceptedFiles[0]);\n    }\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    accept: 'text/csv'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({}),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Import Csv file!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: parsedCsvData && parsedCsvData.map((parsedData, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: parsedData.x\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: parsedData.y\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"1000px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: {\n          labels: parsedCsvData.x,\n          datasets: [{\n            label: \"total expension/month\",\n            data: parsedCsvData,\n            backgroundColor: [\"aqua\", \"green\", \"red\", \"yellow\"],\n            borderColor: [\"aqua\", \"green\", \"red\", \"yellow\"],\n            borderWidth: 0.5\n          }]\n        },\n        height: 400,\n        options: {\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          },\n          legend: {\n            labels: {\n              fontSize: 15\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6CjapALippSkD54D5HimVQ8K8vE=\", false, function () {\n  return [useDropzone];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/burak/Desktop/Project/Netmera-ex-projects/chartdata/src/App.js"],"names":["useState","useCallback","useDropzone","Papa","Bar","App","parsedCsvData","setParsedCsvData","parseFile","file","parse","header","complete","results","data","console","log","onDrop","acceptedFiles","length","getRootProps","getInputProps","accept","map","parsedData","index","x","y","maxWidth","labels","datasets","label","backgroundColor","borderColor","borderWidth","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","legend","fontSize"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport {Bar} from 'react-chartjs-2';\n\nfunction App() {\n  const [parsedCsvData, setParsedCsvData] = useState([]);\n\n  const parseFile = file => {\n    Papa.parse(file, {\n      header: true,\n      complete: results => {\n        setParsedCsvData(results.data);\n      },\n    });\n  };\n\n  console.log(parsedCsvData);\n\n  const onDrop = useCallback(acceptedFiles => {\n    if (acceptedFiles.length) {\n      parseFile(acceptedFiles[0]);\n    }\n  }, []);\n\n  const {\n    getRootProps,\n    getInputProps,\n    \n  } = useDropzone({\n    onDrop,\n    accept: 'text/csv',\n  });\n  \n  return (\n    <div className=\"App\">\n      <div\n        {...getRootProps({\n        })}\n      >\n        <input {...getInputProps()} />\n        <button >\n                  Import Csv file!\n        </button>\n      </div>\n      \n      <table>\n        <div className=\"wrapper\">\n          \n          {parsedCsvData &&\n            parsedCsvData.map((parsedData, index) => (\n             \n              <tr key={index}>\n                <td>{parsedData.x}</td>\n                <td>{parsedData.y}</td>   \n              </tr>\n            ))}\n      </div>\n      </table>\n      <div style={{maxWidth:\"1000px\"}}>\n        \n      <Bar \n      data={{\n        labels:parsedCsvData.x, \n        datasets:[\n          {\n            label:\"total expension/month\",\n            data:parsedCsvData,\n            backgroundColor:[\"aqua\", \"green\", \"red\", \"yellow\"],\n            borderColor:[\"aqua\", \"green\", \"red\", \"yellow\"],\n            borderWidth: 0.5,\n          },\n        ],\n      }}\n      height={400}\n      options={{\n        maintainAspectRatio:false,\n        scales:{\n          yAxes: [\n            {\n              ticks:{\n                beginAtZero:true,\n              },\n            },\n          ],\n        },\n        legend:{\n          labels:{\n            fontSize:15,\n          },\n        },\n      }}\n      />\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}