{"ast":null,"code":"var _jsxFileName = \"/home/burak/Desktop/Project/Netmera-ex-projects/chartdata/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport * as xlsx from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length === headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] === '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] === '\"') d = d.substring(d.length - 2, 1);\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c\n    }));\n    setData(list);\n    setColumns(columns);\n  };\n\n  const handleFileUpload = e => {\n    const file = e.target.file[0];\n    const reader = new FileReader();\n\n    reader.onload = evt => {\n      const bstr = evt.target.result;\n      const wb = xlsx.read(bstr, {\n        type: 'binary'\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = xlsx.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload File!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv,.xlsx,.xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      pagination: true,\n      highlightOnHover: true,\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"6iS6Bq/otUzhHsGWJJIF6E2XX5M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/burak/Desktop/Project/Netmera-ex-projects/chartdata/src/App.js"],"names":["React","useState","DataTable","xlsx","App","columns","setColumns","data","setData","processData","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","handleFileUpload","e","file","target","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;;AAEA,SAASC,GAAT,GAAc;AAAA;;AACZ,QAAM,CAACC,OAAD,EAASC,UAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,IAAD,EAAMC,OAAN,IAAiBP,QAAQ,CAAC,EAAD,CAA/B;;AAEF,QAAMQ,WAAW,GAAGC,UAAU,IAAI;AAChC,UAAMC,eAAe,GAAGD,UAAU,CAACE,KAAX,CAAiB,SAAjB,CAAxB;AACA,UAAMC,OAAO,GAAGF,eAAe,CAAC,CAAD,CAAf,CAAmBC,KAAnB,CAAyB,qCAAzB,CAAhB;AACE,UAAME,IAAI,GAAG,EAAb;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,eAAe,CAACK,MAA9B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAME,GAAG,GAAEN,eAAe,CAACI,CAAD,CAAf,CAAmBH,KAAnB,CAAyB,qCAAzB,CAAX;;AACA,UAAGC,OAAO,IAAII,GAAG,CAACD,MAAJ,KAAeH,OAAO,CAACG,MAArC,EAA4C;AAC1C,cAAME,GAAG,GAAG,EAAZ;;AACE,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACN,OAAO,CAACG,MAAxB,EAA+BG,CAAC,EAAhC,EAAmC;AACjC,cAAIC,CAAC,GAAGH,GAAG,CAACE,CAAD,CAAX;;AACA,cAAGC,CAAC,CAACJ,MAAF,GAAS,CAAZ,EAAc;AACV,gBAAGI,CAAC,CAAC,CAAD,CAAD,KAAS,GAAZ,EACEA,CAAC,GAAGA,CAAC,CAACC,SAAF,CAAY,CAAZ,EAAcD,CAAC,CAACJ,MAAF,GAAS,CAAvB,CAAJ;AACF,gBAAGI,CAAC,CAACA,CAAC,CAACJ,MAAF,GAAS,CAAV,CAAD,KAAkB,GAArB,EACEI,CAAC,GAACA,CAAC,CAACC,SAAF,CAAYD,CAAC,CAACJ,MAAF,GAAS,CAArB,EAAuB,CAAvB,CAAF;AACL;;AACD,cAAGH,OAAO,CAACM,CAAD,CAAV,EAAc;AACZD,YAAAA,GAAG,CAACL,OAAO,CAACM,CAAD,CAAR,CAAH,GAAiBC,CAAjB;AACD;AACF;;AAED,YAAGE,MAAM,CAACC,MAAP,CAAcL,GAAd,EAAmBM,MAAnB,CAA0BC,CAAC,IAAEA,CAA7B,EAAgCT,MAAhC,GAAuC,CAA1C,EAA4C;AAC1CF,UAAAA,IAAI,CAACY,IAAL,CAAUR,GAAV;AACD;AACF;AACJ;;AACD,UAAMb,OAAO,GAAGQ,OAAO,CAACc,GAAR,CAAYC,CAAC,KAAG;AAC9BC,MAAAA,IAAI,EAACD,CADyB;AAE9BE,MAAAA,QAAQ,EAACF;AAFqB,KAAH,CAAb,CAAhB;AAIApB,IAAAA,OAAO,CAACM,IAAD,CAAP;AACAR,IAAAA,UAAU,CAACD,OAAD,CAAV;AACH,GAhCD;;AAiCA,QAAM0B,gBAAgB,GAAGC,CAAC,IAAI;AAC1B,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAAT,CAAc,CAAd,CAAb;AACA,UAAME,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAiBC,GAAD,IAAS;AACrB,YAAMC,IAAI,GAAGD,GAAG,CAACJ,MAAJ,CAAWM,MAAxB;AACA,YAAMC,EAAE,GAAGtC,IAAI,CAACuC,IAAL,CAAUH,IAAV,EAAe;AAACI,QAAAA,IAAI,EAAC;AAAN,OAAf,CAAX;AACA,YAAMC,MAAM,GAAGH,EAAE,CAACI,UAAH,CAAc,CAAd,CAAf;AACA,YAAMC,EAAE,GAAGL,EAAE,CAACM,MAAH,CAAUH,MAAV,CAAX;AACA,YAAMrC,IAAI,GAAEJ,IAAI,CAAC6C,KAAL,CAAWC,YAAX,CAAwBH,EAAxB,EAA2B;AAACI,QAAAA,MAAM,EAAC;AAAR,OAA3B,CAAZ;AACAzC,MAAAA,WAAW,CAACF,IAAD,CAAX;AACH,KAPD;;AAQA4B,IAAAA,MAAM,CAACgB,kBAAP,CAA0BlB,IAA1B;AACH,GAZD;;AAcA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACA,MAAA,IAAI,EAAG,MADP;AAEA,MAAA,MAAM,EAAE,iBAFR;AAGA,MAAA,QAAQ,EAAIF;AAHZ;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE,QAAC,SAAD;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,gBAAgB,MAFlB;AAGE,MAAA,OAAO,EAAI1B,OAHb;AAIE,MAAA,IAAI,EAAIE;AAJV;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBC;;GAnEQH,G;;KAAAA,G;AAoET,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport * as xlsx from 'xlsx';\n\nfunction App(){\n  const [columns,setColumns]= useState([]);\n  const [data,setData] = useState([]);\n\nconst processData = dataString => {\n  const dataStringLines = dataString.split(/\\r\\n|\\n/);\n  const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    const list = [];\n    for(let i=1;i<dataStringLines.length;i++ ){\n      const row =dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if(headers && row.length === headers.length){\n        const obj = {};\n          for(let j = 0;j<headers.length;j++){\n            let d = row[j];\n            if(d.length>0){\n                if(d[0] === '\"')\n                  d = d.substring(1,d.length-1);\n                if(d[d.length-1] === '\"')\n                  d=d.substring(d.length-2,1); \n            }\n            if(headers[j]){\n              obj[headers[j]]= d;\n            }\n          }\n\n          if(Object.values(obj).filter(x=>x).length>0){\n            list.push(obj);\n          }\n        }\n    }\n    const columns = headers.map(c=>({\n      name:c,\n      selector:c,\n    }));\n    setData(list);\n    setColumns(columns);\n}\nconst handleFileUpload = e => {\n    const file = e.target.file[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n        const bstr = evt.target.result;\n        const wb = xlsx.read(bstr,{type:'binary'});\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data =xlsx.utils.sheet_to_csv(ws,{header:1});\n        processData(data);\n    };\n    reader.readAsBinaryString(file);\n}\n\nreturn (\n  <div>\n    <h3>Upload File!</h3>\n    <input \n    type = \"file\"\n    accept =\".csv,.xlsx,.xls\"\n    onChange = {handleFileUpload}\n    />\n    <DataTable\n      pagination\n      highlightOnHover\n      columns = {columns}\n      data = {data}\n      />\n  </div>\n);\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}